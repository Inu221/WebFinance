require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const cron = require("node-cron");

const connectDB = require("./db");
const assetRoutes = require("./routes/assets");
const cryptoRoutes = require("./routes/crypto");
const commoditiesRoutes = require("./routes/commodities");
const { updateCurrencyRates, updateCryptoRates, updateCommodityRates } = require('./updateRates');

const app = express();
app.use(cors());
app.use(express.json());

app.use("/api/assets", assetRoutes);
app.use("/api/crypto", cryptoRoutes);
app.use("/api/commodities", commoditiesRoutes);

async function start() {
  try {
    await connectDB();
    app.listen(5000, () => {
      console.log("‚úÖ Backend server running on http://localhost:5000");
    });

    // –ó–∞–ø—É—Å–∫ cron
    cron.schedule("*/10 * * * *", async () => {
      console.log("üîÅ [CRON] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å API –¶–ë –†–§, —Ç–æ–≤–∞—Ä–æ–≤");
      try {
        await updateCurrencyRates();
        await updateCommodityRates();
        console.log("‚úÖ –ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:", err.message);
      }
    });

    cron.schedule('*/5 * * * *', async () => {
      console.log('üîÅ [CRON] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å CoinGecko...');
      try {
        await updateCryptoRates();
        console.log('‚úÖ –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç—ã:', err.message);
      }
    });

    // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    await updateCurrencyRates();
    await updateCommodityRates();
    console.log("üì• –ù–∞—á–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", err.message);
  }
}

start();